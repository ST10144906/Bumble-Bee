@model BumbleBeeWebApp.Controllers.PaymentViewModel

<link rel="stylesheet" type="text/css" href="~/css/payment.css" />

<div class="container">
    <div class="payment-header text-center">
        <h2>Make a Donation</h2>
    </div>

    <div class="payment-container">
        <!-- Form for processing payment, either one-time or recurring -->
        <form id="paymentForm">
            <div class="form-group">
                <label for="ProjectName">Select a Project:</label>
                <select name="SelectedProject" id="ProjectName" class="form-control">
                    @foreach (var project in Model.ProjectNames)
                    {
                        if (project == Model.SelectedProject)
                        {
                            <option value="@project" selected="selected">@project</option>
                        }
                        else
                        {
                            <option value="@project">@project</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="email-address">Email</label>
                <input type="email" name="Email" id="email-address" class="form-control" value="@Model.Email" required />
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <input type="number" name="Amount" id="amount" class="form-control" value="@Model.Amount" required />
            </div>

            <div class="form-group">
                <label for="first-name">Name</label>
                <input type="text" name="Name" id="first-name" class="form-control" value="@Model.Name" required />
            </div>

            <div class="form-group">
                <label>Payment Type</label>
                <div>
                    <label><input type="radio" name="PaymentType" value="one-time" checked /> One-Time Payment</label>
                </div>
                <div>
                    <label><input type="radio" name="PaymentType" value="recurring" /> Recurring Payment</label>
                </div>
            </div>

            <div id="recurring-options" style="display: none;">
                <div class="form-group">
                    <label for="interval">Billing Period</label>
                    <select name="Interval" id="interval" class="form-control">
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="annually">Annually</option>
                    </select>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Pay Now</button>
        </form>
    </div>
</div>

<script src="https://js.paystack.co/v1/inline.js"></script>
<script>
    // --- Toggle visibility of recurring options based on payment type selection
    document.querySelectorAll('input[name="PaymentType"]').forEach((elem) => {
        elem.addEventListener('change', function () {
            document.getElementById('recurring-options').style.display = this.value === 'recurring' ? 'block' : 'none';
        });
    });

    document.getElementById('paymentForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const selectedProject = document.getElementById('ProjectName').value;
        const email = document.getElementById('email-address').value;
        const amount = document.getElementById('amount').value;
        const fullName = document.getElementById('first-name').value;
        const paymentType = document.querySelector('input[name="PaymentType"]:checked').value;
        const interval = paymentType === 'recurring' ? document.getElementById('interval').value : null;

        if (!email || !amount || amount <= 0 || !fullName) {
            alert("Please provide all required fields.");
            return;
        }

        const data = {
            SelectedProject: selectedProject,
            Email: email,
            Amount: amount,
            Name: fullName,
            PaymentType: paymentType,
            Interval: interval
        };

        try {
            const response = await fetch('/Payment/ProcessPayment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.authorizationUrl) {
                const handler = PaystackPop.setup({
                    key: '@Model.PublicKey',
                    email: email,
                    amount: amount * 100,
                    currency: 'ZAR',
                    ref: result.reference,
                    callback: function (response) {
                        window.location.href = `/Payment/VerifyPayment?reference=${result.reference}&selectedProject=${encodeURIComponent(selectedProject)}&fullName=${encodeURIComponent(fullName)}&userEmail=${encodeURIComponent(email)}&PaymentType=${encodeURIComponent(paymentType)}&Interval=${encodeURIComponent(interval)}`;
                    },
                    onClose: function () {
                        alert('Transaction was not completed, window closed.');
                    }
                });
                handler.openIframe();
            } else if (result.error) {
                alert(result.error);
            } else {
                alert('Unexpected error occurred.');
            }
        } catch (error) {
            console.error("Error during fetch:", error);
            alert('Failed to initialize payment. Please try again later.');
        }
    });
</script>